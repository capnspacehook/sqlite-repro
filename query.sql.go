// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package main

import (
	"context"
)

const addContainer = `-- name: AddContainer :exec
INSERT INTO
	containers(id, name)
VALUES
	(
		?,
		?
	)
`

type AddContainerParams struct {
	ID   string
	Name string
}

func (q *Queries) AddContainer(ctx context.Context, arg AddContainerParams) error {
	_, err := q.exec(ctx, q.addContainerStmt, addContainer, arg.ID, arg.Name)
	return err
}

const addContainerAddr = `-- name: AddContainerAddr :exec
INSERT INTO
	addrs(addr, container_id)
VALUES
	(
		?,
		?
	)
`

type AddContainerAddrParams struct {
	Addr        []byte
	ContainerID string
}

func (q *Queries) AddContainerAddr(ctx context.Context, arg AddContainerAddrParams) error {
	_, err := q.exec(ctx, q.addContainerAddrStmt, addContainerAddr, arg.Addr, arg.ContainerID)
	return err
}

const addContainerAlias = `-- name: AddContainerAlias :exec
INSERT INTO
	container_aliases(container_id, container_alias)
VALUES
	(
		?,
		?
	)
`

type AddContainerAliasParams struct {
	ContainerID    string
	ContainerAlias string
}

func (q *Queries) AddContainerAlias(ctx context.Context, arg AddContainerAliasParams) error {
	_, err := q.exec(ctx, q.addContainerAliasStmt, addContainerAlias, arg.ContainerID, arg.ContainerAlias)
	return err
}

const deleteContainer = `-- name: DeleteContainer :exec
DELETE FROM
	containers
WHERE
	id = ?
`

func (q *Queries) DeleteContainer(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteContainerStmt, deleteContainer, id)
	return err
}

const getContainers = `-- name: GetContainers :many
SELECT 
	id,
	name
FROM
	containers
`

func (q *Queries) GetContainers(ctx context.Context) ([]Container, error) {
	rows, err := q.query(ctx, q.getContainersStmt, getContainers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Container
	for rows.Next() {
		var i Container
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
